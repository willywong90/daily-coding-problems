/*

Daily Coding Problem 180

Given a stack of N elements, interleave the first half of the stack with the second half reversed using only one other queue. This should be done in-place.

Recall that you can only push or pop from a stack, and enqueue or dequeue from a queue.

For example, if the stack is [1, 2, 3, 4, 5], it should become [1, 5, 2, 4, 3]. If the stack is [1, 2, 3, 4], it should become [1, 4, 2, 3].

*/

DCP180 = (input) => {
    const stack = input;
    const queue = [];

    const halfLength = Math.ceil(input.length/2);

    // reverse order of input
    while (stack.length > 0) {
        const topStack = stack.pop();

        queue.push(topStack);
    }

    let numberToShift = queue.length - halfLength;
    while (numberToShift > 0) {
        const firstInQueue = queue.shift();
        queue.push(firstInQueue);

        numberToShift--;
    }

    while (stack.length < halfLength) {
        stack.push(queue.shift());
    }

    while (stack.length > 0) {
        queue.push(stack.pop());

        if (stack.length > 0) {
            queue.push(queue.shift());
        } else if (stack.length === 0 && queue.length%2 === 0) {
            queue.push(queue.shift());
        }
    }

    return queue;
}

var test1 = [1,2,3,4,5];
var test2 = [1,2,3,4];

console.log(DCP180(test1));
