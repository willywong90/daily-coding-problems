/*

Daily Coding Problem 191

Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Intervals can "touch", such as [0, 1] and [1, 2], but they won't be considered overlapping.

For example, given the intervals (7, 9), (2, 4), (5, 8), return 1 as the last interval can be removed and the first two won't overlap.

The intervals are not necessarily sorted in any order.

*/

function dcp191(intervals) {
    var arrayLength = intervals.length;
    
    intervals.sort(function(a, b) {
       return a[1] - b[1]; 
    });

    var scheduled = [];
    var lastEndTime = 0;

    for (var x = 0; x < arrayLength; x++) {
        if (intervals[x][0] >= lastEndTime) {
            scheduled.push(intervals[x]);
            lastEndTime = intervals[x][1];
        }
    }

    return arrayLength - scheduled.length;
}

var test1 = [[1, 2], [2, 3], [3, 4]];
var test2 = [[7, 9], [2, 4], [5, 8]];
var test3 = [[1, 3], [1, 2], [2, 3]];

console.log(dcp191(test1));
